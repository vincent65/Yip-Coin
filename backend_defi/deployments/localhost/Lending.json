{
  "address": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
  "abi": [
    {
      "inputs": [],
      "name": "NeedsMoreThanZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "AllowedTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "repayToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "halfDebtInEth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_REWARD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_HEALH_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAccountBorrowedValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAccountCollateralValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAccountInformation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "borrowedValueInETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralValueInETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getEthValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getTokenValueFromEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "healthFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "repayToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_accountToTokenBorrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_accountToTokenDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_allowedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_tokenToPriceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "setAllowedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x945de34062a46c64676b10cf46e30e170f4b33b69945a792fbdac935e9332a10",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
    "transactionIndex": 0,
    "gasUsed": "2451621",
    "logsBloom": "0x
    "blockHash": "0x6b0f1b7b92aa90ebf48a13a9f819fdfdd00c1e889260d59b98c8b05ede071f30",
    "transactionHash": "0x945de34062a46c64676b10cf46e30e170f4b33b69945a792fbdac935e9332a10",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12,
        "transactionHash": "0x945de34062a46c64676b10cf46e30e170f4b33b69945a792fbdac935e9332a10",
        "address": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6b0f1b7b92aa90ebf48a13a9f819fdfdd00c1e889260d59b98c8b05ede071f30"
      }
    ],
    "blockNumber": 12,
    "cumulativeGasUsed": "2451621",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f46110d259fb4b96321f34a30f5848dd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NeedsMoreThanZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"AllowedTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"repayToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"halfDebtInEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LIQUIDATION_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_HEALH_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAccountBorrowedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAccountCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAccountInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowedValueInETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralValueInETH\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getEthValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokenValueFromEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"healthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"repayToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_accountToTokenBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_accountToTokenDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_allowedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_tokenToPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"setAllowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lending.sol\":\"Lending\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Lending.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// This contract is not audited!!!\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\nerror TransferFailed();\\nerror TokenNotAllowed(address token);\\nerror NeedsMoreThanZero();\\n\\ncontract Lending is ReentrancyGuard, Ownable {\\n    mapping(address => address) public s_tokenToPriceFeed;\\n    address[] public s_allowedTokens;\\n    // Account -> Token -> Amount\\n    mapping(address => mapping(address => uint256)) public s_accountToTokenDeposits;\\n    // Account -> Token -> Amount\\n    mapping(address => mapping(address => uint256)) public s_accountToTokenBorrows;\\n\\n    // 5% Liquidation Reward\\n    uint256 public constant LIQUIDATION_REWARD = 5;\\n    // At 80% Loan to Value Ratio, the loan can be liquidated\\n    uint256 public constant LIQUIDATION_THRESHOLD = 80;\\n    uint256 public constant MIN_HEALH_FACTOR = 1e18;\\n\\n    event AllowedTokenSet(address indexed token, address indexed priceFeed);\\n    event Deposit(address indexed account, address indexed token, uint256 indexed amount);\\n    event Borrow(address indexed account, address indexed token, uint256 indexed amount);\\n    event Withdraw(address indexed account, address indexed token, uint256 indexed amount);\\n    event Repay(address indexed account, address indexed token, uint256 indexed amount);\\n    event Liquidate(\\n        address indexed account,\\n        address indexed repayToken,\\n        address indexed rewardToken,\\n        uint256 halfDebtInEth,\\n        address liquidator\\n    );\\n\\n    function deposit(address token, uint256 amount)\\n        external\\n        nonReentrant\\n        isAllowedToken(token)\\n        moreThanZero(amount)\\n    {\\n        emit Deposit(msg.sender, token, amount);\\n        s_accountToTokenDeposits[msg.sender][token] += amount;\\n        bool success = IERC20(token).transferFrom(msg.sender, address(this), amount);\\n        if (!success) revert TransferFailed();\\n    }\\n\\n    function withdraw(address token, uint256 amount) external nonReentrant moreThanZero(amount) {\\n        require(s_accountToTokenDeposits[msg.sender][token] >= amount, \\\"Not enough funds\\\");\\n        emit Withdraw(msg.sender, token, amount);\\n        _pullFunds(msg.sender, token, amount);\\n        require(healthFactor(msg.sender) >= MIN_HEALH_FACTOR, \\\"Platform will go insolvent!\\\");\\n    }\\n\\n    function _pullFunds(\\n        address account,\\n        address token,\\n        uint256 amount\\n    ) private {\\n        require(s_accountToTokenDeposits[account][token] >= amount, \\\"Not enough funds to withdraw\\\");\\n        s_accountToTokenDeposits[account][token] -= amount;\\n        bool success = IERC20(token).transfer(msg.sender, amount);\\n        if (!success) revert TransferFailed();\\n    }\\n\\n    function borrow(address token, uint256 amount)\\n        external\\n        nonReentrant\\n        isAllowedToken(token)\\n        moreThanZero(amount)\\n    {\\n        require(IERC20(token).balanceOf(address(this)) >= amount, \\\"Not enough tokens to borrow\\\");\\n        s_accountToTokenBorrows[msg.sender][token] += amount;\\n        emit Borrow(msg.sender, token, amount);\\n        bool success = IERC20(token).transfer(msg.sender, amount);\\n        if (!success) revert TransferFailed();\\n        require(healthFactor(msg.sender) >= MIN_HEALH_FACTOR, \\\"Platform will go insolvent!\\\");\\n    }\\n\\n    function liquidate(\\n        address account,\\n        address repayToken,\\n        address rewardToken\\n    ) external nonReentrant {\\n        require(healthFactor(account) < MIN_HEALH_FACTOR, \\\"Account can't be liquidated!\\\");\\n        uint256 halfDebt = s_accountToTokenBorrows[account][repayToken] / 2;\\n        uint256 halfDebtInEth = getEthValue(repayToken, halfDebt);\\n        require(halfDebtInEth > 0, \\\"Choose a different repayToken!\\\");\\n        uint256 rewardAmountInEth = (halfDebtInEth * LIQUIDATION_REWARD) / 100;\\n        uint256 totalRewardAmountInRewardToken = getTokenValueFromEth(\\n            rewardToken,\\n            rewardAmountInEth + halfDebtInEth\\n        );\\n        emit Liquidate(account, repayToken, rewardToken, halfDebtInEth, msg.sender);\\n        _repay(account, repayToken, halfDebt);\\n        _pullFunds(account, rewardToken, totalRewardAmountInRewardToken);\\n    }\\n\\n    function repay(address token, uint256 amount)\\n        external\\n        nonReentrant\\n        isAllowedToken(token)\\n        moreThanZero(amount)\\n    {\\n        emit Repay(msg.sender, token, amount);\\n        _repay(msg.sender, token, amount);\\n    }\\n\\n    function _repay(\\n        address account,\\n        address token,\\n        uint256 amount\\n    ) private {\\n        // require(s_accountToTokenBorrows[account][token] - amount >= 0, \\\"Repayed too much!\\\");\\n        // On 0.8+ of solidity, it auto reverts math that would drop below 0 for a uint256\\n        s_accountToTokenBorrows[account][token] -= amount;\\n        bool success = IERC20(token).transferFrom(msg.sender, address(this), amount);\\n        if (!success) revert TransferFailed();\\n    }\\n\\n    function getAccountInformation(address user)\\n        public\\n        view\\n        returns (uint256 borrowedValueInETH, uint256 collateralValueInETH)\\n    {\\n        borrowedValueInETH = getAccountBorrowedValue(user);\\n        collateralValueInETH = getAccountCollateralValue(user);\\n    }\\n\\n    function getAccountCollateralValue(address user) public view returns (uint256) {\\n        uint256 totalCollateralValueInETH = 0;\\n        for (uint256 index = 0; index < s_allowedTokens.length; index++) {\\n            address token = s_allowedTokens[index];\\n            uint256 amount = s_accountToTokenDeposits[user][token];\\n            uint256 valueInEth = getEthValue(token, amount);\\n            totalCollateralValueInETH += valueInEth;\\n        }\\n        return totalCollateralValueInETH;\\n    }\\n\\n    function getAccountBorrowedValue(address user) public view returns (uint256) {\\n        uint256 totalBorrowsValueInETH = 0;\\n        for (uint256 index = 0; index < s_allowedTokens.length; index++) {\\n            address token = s_allowedTokens[index];\\n            uint256 amount = s_accountToTokenBorrows[user][token];\\n            uint256 valueInEth = getEthValue(token, amount);\\n            totalBorrowsValueInETH += valueInEth;\\n        }\\n        return totalBorrowsValueInETH;\\n    }\\n\\n    function getEthValue(address token, uint256 amount) public view returns (uint256) {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(s_tokenToPriceFeed[token]);\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // 2000 DAI = 1 ETH\\n        // 0.002 ETH per DAI\\n        // price will be something like 20000000000000000\\n        // So we multiply the price by the amount, and then divide by 1e18\\n        // 2000 DAI * (0.002 ETH / 1 DAI) = 0.002 ETH\\n        // (2000 * 10 ** 18) * ((0.002 * 10 ** 18) / 10 ** 18) = 0.002 ETH\\n        return (uint256(price) * amount) / 1e18;\\n    }\\n\\n    function getTokenValueFromEth(address token, uint256 amount) public view returns (uint256) {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(s_tokenToPriceFeed[token]);\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return (amount * 1e18) / uint256(price);\\n    }\\n\\n    function healthFactor(address account) public view returns (uint256) {\\n        (uint256 borrowedValueInEth, uint256 collateralValueInEth) = getAccountInformation(account);\\n        uint256 collateralAdjustedForThreshold = (collateralValueInEth * LIQUIDATION_THRESHOLD) /\\n            100;\\n        if (borrowedValueInEth == 0) return 100e18;\\n        return (collateralAdjustedForThreshold * 1e18) / borrowedValueInEth;\\n    }\\n\\n    /********************/\\n    /* Modifiers */\\n    /********************/\\n\\n    modifier isAllowedToken(address token) {\\n        if (s_tokenToPriceFeed[token] == address(0)) revert TokenNotAllowed(token);\\n        _;\\n    }\\n\\n    modifier moreThanZero(uint256 amount) {\\n        if (amount == 0) {\\n            revert NeedsMoreThanZero();\\n        }\\n        _;\\n    }\\n\\n    /********************/\\n    /* DAO / OnlyOwner Functions */\\n    /********************/\\n    function setAllowedToken(address token, address priceFeed) external onlyOwner {\\n        bool foundToken = false;\\n        uint256 allowedTokensLength = s_allowedTokens.length;\\n        for (uint256 index = 0; index < allowedTokensLength; index++) {\\n            if (s_allowedTokens[index] == token) {\\n                foundToken = true;\\n                break;\\n            }\\n        }\\n        if (!foundToken) {\\n            s_allowedTokens.push(token);\\n        }\\n        s_tokenToPriceFeed[token] = priceFeed;\\n        emit AllowedTokenSet(token, priceFeed);\\n    }\\n\\n    /********************/\\n    /* Getter Functions */\\n    /********************/\\n    // Ideally, we'd have getter functions for all our s_ variables we want exposed, and set them all to private.\\n    // But, for the purpose of this demo, we've left them public for simplicity.\\n}\\n\",\"keccak256\":\"0xa225ffb5c1ab15fe33fb55281415838120237db0cc10e8b39ce936bb8f498645\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060016000819055506200003a6200002e6200004060201b60201c565b6200004860201b60201c565b6200010e565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612ab1806200011e6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80637d1a4450116100b8578063ad0d75941161007c578063ad0d7594146103c2578063c183f76d146103e0578063ca5ce2ec146103fc578063df80eed214610418578063f2fde38b14610436578063f3fef3a31461045257610142565b80637d1a4450146102f65780638da5cb5b1461032657806390a8ae9b1461034457806394ecead5146103625780639b35678d1461039257610142565b80634b8a35291161010a5780634b8a35291461020f5780634f0cc2fa1461022b57806359a555b91461025b5780636ad9f9df1461028b578063715018a6146102bb5780637be564fc146102c557610142565b80630af8c88e146101475780630f1e35da1461017757806322867d78146101a7578063396aaa8f146101c357806347e7ef24146101f3575b600080fd5b610161600480360381019061015c91906121d2565b61046e565b60405161016e9190612400565b60405180910390f35b610191600480360381019061018c9190612165565b6104ad565b60405161019e919061259b565b60405180910390f35b6101c160048036038101906101bc9190612165565b6105c1565b005b6101dd60048036038101906101d891906120d2565b610791565b6040516101ea919061259b565b60405180910390f35b61020d60048036038101906102089190612165565b6107b6565b005b61022960048036038101906102249190612165565b610ad9565b005b610245600480360381019061024091906120a5565b610f18565b604051610252919061259b565b60405180910390f35b61027560048036038101906102709190612165565b61102f565b604051610282919061259b565b60405180910390f35b6102a560048036038101906102a091906120a5565b611143565b6040516102b2919061259b565b60405180910390f35b6102c36111b9565b005b6102df60048036038101906102da91906120a5565b611241565b6040516102ed9291906125df565b60405180910390f35b610310600480360381019061030b91906120a5565b61125f565b60405161031d919061259b565b60405180910390f35b61032e611376565b60405161033b9190612400565b60405180910390f35b61034c6113a0565b604051610359919061259b565b60405180910390f35b61037c600480360381019061037791906120a5565b6113a5565b6040516103899190612400565b60405180910390f35b6103ac60048036038101906103a791906120d2565b6113d8565b6040516103b9919061259b565b60405180910390f35b6103ca6113fd565b6040516103d7919061259b565b60405180910390f35b6103fa60048036038101906103f591906120d2565b611402565b005b61041660048036038101906104119190612112565b61166a565b005b6104206118c3565b60405161042d919061259b565b60405180910390f35b610450600480360381019061044b91906120a5565b6118cf565b005b61046c60048036038101906104679190612165565b6119c7565b005b6003818154811061047e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561055a57600080fd5b505afa15801561056e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610592919061222c565b50505091505080670de0b6b3a7640000856105ad91906126a0565b6105b7919061266f565b9250505092915050565b60026000541415610607576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fe9061257b565b60405180910390fd5b600260008190555081600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106e157806040517f94403b700000000000000000000000000000000000000000000000000000000081526004016106d89190612400565b60405180910390fd5b81600081141561071d576040517ff45911f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f05f2eeda0e08e4b437f487c8d7d29b14537d15e3488170dc3de5dbdf8dac468460405160405180910390a4610783338585611bd6565b505060016000819055505050565b6004602052816000526040600020602052806000526040600020600091509150505481565b600260005414156107fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f39061257b565b60405180910390fd5b600260008190555081600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156108d657806040517f94403b700000000000000000000000000000000000000000000000000000000081526004016108cd9190612400565b60405180910390fd5b816000811415610912576040517ff45911f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f6260405160405180910390a482600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109f99190612619565b9250508190555060008473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610a3f9392919061241b565b602060405180830381600087803b158015610a5957600080fd5b505af1158015610a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9191906121a5565b905080610aca576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505060016000819055505050565b60026000541415610b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b169061257b565b60405180910390fd5b600260008190555081600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610bf957806040517f94403b70000000000000000000000000000000000000000000000000000000008152600401610bf09190612400565b60405180910390fd5b816000811415610c35576040517ff45911f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c6f9190612400565b60206040518083038186803b158015610c8757600080fd5b505afa158015610c9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbf91906121ff565b1015610d00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf7906124fb565b60405180910390fd5b82600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d8c9190612619565b92505081905550828473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f312a5e5e1079f5dda4e95dbbd0b908b291fd5b992ef22073643ab691572c5b5260405160405180910390a460008473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b8152600401610e2b929190612452565b602060405180830381600087803b158015610e4557600080fd5b505af1158015610e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7d91906121a5565b905080610eb6576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b670de0b6b3a7640000610ec833611143565b1015610f09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f009061255b565b60405180910390fd5b50505060016000819055505050565b6000806000905060005b60038054905081101561102557600060038281548110610f4557610f4461283d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000610fff838361102f565b9050808561100d9190612619565b9450505050808061101d90612796565b915050610f22565b5080915050919050565b600080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156110dc57600080fd5b505afa1580156110f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611114919061222c565b505050915050670de0b6b3a7640000848261112f91906126a0565b611139919061266f565b9250505092915050565b600080600061115184611241565b915091506000606460508361116691906126a0565b611170919061266f565b9050600083141561118f5768056bc75e2d6310000093505050506111b4565b82670de0b6b3a7640000826111a491906126a0565b6111ae919061266f565b93505050505b919050565b6111c1611d39565b73ffffffffffffffffffffffffffffffffffffffff166111df611376565b73ffffffffffffffffffffffffffffffffffffffff1614611235576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122c9061251b565b60405180910390fd5b61123f6000611d41565b565b60008061124d83610f18565b91506112588361125f565b9050915091565b6000806000905060005b60038054905081101561136c5760006003828154811061128c5761128b61283d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000611346838361102f565b905080856113549190612619565b9450505050808061136490612796565b915050611269565b5080915050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b605081565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6005602052816000526040600020602052806000526040600020600091509150505481565b600581565b61140a611d39565b73ffffffffffffffffffffffffffffffffffffffff16611428611376565b73ffffffffffffffffffffffffffffffffffffffff161461147e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114759061251b565b60405180910390fd5b600080600380549050905060005b81811015611522578473ffffffffffffffffffffffffffffffffffffffff16600382815481106114bf576114be61283d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561150f5760019250611522565b808061151a90612796565b91505061148c565b508161158c576003849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f4f9bd0d8360fd59a62c52cf8b386f7c7b65097c9e336e860d08ffb9df34067d160405160405180910390a350505050565b600260005414156116b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a79061257b565b60405180910390fd5b6002600081905550670de0b6b3a76400006116ca84611143565b1061170a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117019061253b565b60405180910390fd5b60006002600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611795919061266f565b905060006117a3848361102f565b9050600081116117e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117df9061249b565b60405180910390fd5b600060646005836117f991906126a0565b611803919061266f565b9050600061181c8584846118179190612619565b6104ad565b90508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fcea6068021f706074af611c2a4b6b08820c5b8223a80149684c64c60ce7be3cc86336040516118949291906125b6565b60405180910390a46118a7878786611bd6565b6118b2878683611e07565b505050506001600081905550505050565b670de0b6b3a764000081565b6118d7611d39565b73ffffffffffffffffffffffffffffffffffffffff166118f5611376565b73ffffffffffffffffffffffffffffffffffffffff161461194b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119429061251b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b29061247b565b60405180910390fd5b6119c481611d41565b50565b60026000541415611a0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a049061257b565b60405180910390fd5b6002600081905550806000811415611a51576040517ff45911f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b07906124db565b60405180910390fd5b818373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb60405160405180910390a4611b76338484611e07565b670de0b6b3a7640000611b8833611143565b1015611bc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc09061255b565b60405180910390fd5b5060016000819055505050565b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c6291906126fa565b9250508190555060008273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401611ca89392919061241b565b602060405180830381600087803b158015611cc257600080fd5b505af1158015611cd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfa91906121a5565b905080611d33576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611ec6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ebd906124bb565b60405180910390fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f5291906126fa565b9250508190555060008273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401611f96929190612452565b602060405180830381600087803b158015611fb057600080fd5b505af1158015611fc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe891906121a5565b905080612021576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60008135905061203681612a08565b92915050565b60008151905061204b81612a1f565b92915050565b60008151905061206081612a36565b92915050565b60008135905061207581612a4d565b92915050565b60008151905061208a81612a4d565b92915050565b60008151905061209f81612a64565b92915050565b6000602082840312156120bb576120ba61286c565b5b60006120c984828501612027565b91505092915050565b600080604083850312156120e9576120e861286c565b5b60006120f785828601612027565b925050602061210885828601612027565b9150509250929050565b60008060006060848603121561212b5761212a61286c565b5b600061213986828701612027565b935050602061214a86828701612027565b925050604061215b86828701612027565b9150509250925092565b6000806040838503121561217c5761217b61286c565b5b600061218a85828601612027565b925050602061219b85828601612066565b9150509250929050565b6000602082840312156121bb576121ba61286c565b5b60006121c98482850161203c565b91505092915050565b6000602082840312156121e8576121e761286c565b5b60006121f684828501612066565b91505092915050565b6000602082840312156122155761221461286c565b5b60006122238482850161207b565b91505092915050565b600080600080600060a086880312156122485761224761286c565b5b600061225688828901612090565b955050602061226788828901612051565b94505060406122788882890161207b565b93505060606122898882890161207b565b925050608061229a88828901612090565b9150509295509295909350565b6122b08161272e565b82525050565b60006122c3602683612608565b91506122ce82612871565b604082019050919050565b60006122e6601e83612608565b91506122f1826128c0565b602082019050919050565b6000612309601c83612608565b9150612314826128e9565b602082019050919050565b600061232c601083612608565b915061233782612912565b602082019050919050565b600061234f601b83612608565b915061235a8261293b565b602082019050919050565b6000612372602083612608565b915061237d82612964565b602082019050919050565b6000612395601c83612608565b91506123a08261298d565b602082019050919050565b60006123b8601b83612608565b91506123c3826129b6565b602082019050919050565b60006123db601f83612608565b91506123e6826129df565b602082019050919050565b6123fa81612776565b82525050565b600060208201905061241560008301846122a7565b92915050565b600060608201905061243060008301866122a7565b61243d60208301856122a7565b61244a60408301846123f1565b949350505050565b600060408201905061246760008301856122a7565b61247460208301846123f1565b9392505050565b60006020820190508181036000830152612494816122b6565b9050919050565b600060208201905081810360008301526124b4816122d9565b9050919050565b600060208201905081810360008301526124d4816122fc565b9050919050565b600060208201905081810360008301526124f48161231f565b9050919050565b6000602082019050818103600083015261251481612342565b9050919050565b6000602082019050818103600083015261253481612365565b9050919050565b6000602082019050818103600083015261255481612388565b9050919050565b60006020820190508181036000830152612574816123ab565b9050919050565b60006020820190508181036000830152612594816123ce565b9050919050565b60006020820190506125b060008301846123f1565b92915050565b60006040820190506125cb60008301856123f1565b6125d860208301846122a7565b9392505050565b60006040820190506125f460008301856123f1565b61260160208301846123f1565b9392505050565b600082825260208201905092915050565b600061262482612776565b915061262f83612776565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612664576126636127df565b5b828201905092915050565b600061267a82612776565b915061268583612776565b9250826126955761269461280e565b5b828204905092915050565b60006126ab82612776565b91506126b683612776565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156126ef576126ee6127df565b5b828202905092915050565b600061270582612776565b915061271083612776565b925082821015612723576127226127df565b5b828203905092915050565b600061273982612756565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b60006127a182612776565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127d4576127d36127df565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f43686f6f7365206120646966666572656e74207265706179546f6b656e210000600082015250565b7f4e6f7420656e6f7567682066756e647320746f20776974686472617700000000600082015250565b7f4e6f7420656e6f7567682066756e647300000000000000000000000000000000600082015250565b7f4e6f7420656e6f75676820746f6b656e7320746f20626f72726f770000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4163636f756e742063616e2774206265206c6971756964617465642100000000600082015250565b7f506c6174666f726d2077696c6c20676f20696e736f6c76656e74210000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b612a118161272e565b8114612a1c57600080fd5b50565b612a2881612740565b8114612a3357600080fd5b50565b612a3f8161274c565b8114612a4a57600080fd5b50565b612a5681612776565b8114612a6157600080fd5b50565b612a6d81612780565b8114612a7857600080fd5b5056fea26469706673582212201adf3a9023dfce1590c76f0b8b747ac2e54ce743331074ddb544f73d0711e10d64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c80637d1a4450116100b8578063ad0d75941161007c578063ad0d7594146103c2578063c183f76d146103e0578063ca5ce2ec146103fc578063df80eed214610418578063f2fde38b14610436578063f3fef3a31461045257610142565b80637d1a4450146102f65780638da5cb5b1461032657806390a8ae9b1461034457806394ecead5146103625780639b35678d1461039257610142565b80634b8a35291161010a5780634b8a35291461020f5780634f0cc2fa1461022b57806359a555b91461025b5780636ad9f9df1461028b578063715018a6146102bb5780637be564fc146102c557610142565b80630af8c88e146101475780630f1e35da1461017757806322867d78146101a7578063396aaa8f146101c357806347e7ef24146101f3575b600080fd5b610161600480360381019061015c91906121d2565b61046e565b60405161016e9190612400565b60405180910390f35b610191600480360381019061018c9190612165565b6104ad565b60405161019e919061259b565b60405180910390f35b6101c160048036038101906101bc9190612165565b6105c1565b005b6101dd60048036038101906101d891906120d2565b610791565b6040516101ea919061259b565b60405180910390f35b61020d60048036038101906102089190612165565b6107b6565b005b61022960048036038101906102249190612165565b610ad9565b005b610245600480360381019061024091906120a5565b610f18565b604051610252919061259b565b60405180910390f35b61027560048036038101906102709190612165565b61102f565b604051610282919061259b565b60405180910390f35b6102a560048036038101906102a091906120a5565b611143565b6040516102b2919061259b565b60405180910390f35b6102c36111b9565b005b6102df60048036038101906102da91906120a5565b611241565b6040516102ed9291906125df565b60405180910390f35b610310600480360381019061030b91906120a5565b61125f565b60405161031d919061259b565b60405180910390f35b61032e611376565b60405161033b9190612400565b60405180910390f35b61034c6113a0565b604051610359919061259b565b60405180910390f35b61037c600480360381019061037791906120a5565b6113a5565b6040516103899190612400565b60405180910390f35b6103ac60048036038101906103a791906120d2565b6113d8565b6040516103b9919061259b565b60405180910390f35b6103ca6113fd565b6040516103d7919061259b565b60405180910390f35b6103fa60048036038101906103f591906120d2565b611402565b005b61041660048036038101906104119190612112565b61166a565b005b6104206118c3565b60405161042d919061259b565b60405180910390f35b610450600480360381019061044b91906120a5565b6118cf565b005b61046c60048036038101906104679190612165565b6119c7565b005b6003818154811061047e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561055a57600080fd5b505afa15801561056e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610592919061222c565b50505091505080670de0b6b3a7640000856105ad91906126a0565b6105b7919061266f565b9250505092915050565b60026000541415610607576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fe9061257b565b60405180910390fd5b600260008190555081600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106e157806040517f94403b700000000000000000000000000000000000000000000000000000000081526004016106d89190612400565b60405180910390fd5b81600081141561071d576040517ff45911f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f05f2eeda0e08e4b437f487c8d7d29b14537d15e3488170dc3de5dbdf8dac468460405160405180910390a4610783338585611bd6565b505060016000819055505050565b6004602052816000526040600020602052806000526040600020600091509150505481565b600260005414156107fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f39061257b565b60405180910390fd5b600260008190555081600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156108d657806040517f94403b700000000000000000000000000000000000000000000000000000000081526004016108cd9190612400565b60405180910390fd5b816000811415610912576040517ff45911f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f6260405160405180910390a482600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109f99190612619565b9250508190555060008473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610a3f9392919061241b565b602060405180830381600087803b158015610a5957600080fd5b505af1158015610a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9191906121a5565b905080610aca576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505060016000819055505050565b60026000541415610b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b169061257b565b60405180910390fd5b600260008190555081600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610bf957806040517f94403b70000000000000000000000000000000000000000000000000000000008152600401610bf09190612400565b60405180910390fd5b816000811415610c35576040517ff45911f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c6f9190612400565b60206040518083038186803b158015610c8757600080fd5b505afa158015610c9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbf91906121ff565b1015610d00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf7906124fb565b60405180910390fd5b82600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d8c9190612619565b92505081905550828473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f312a5e5e1079f5dda4e95dbbd0b908b291fd5b992ef22073643ab691572c5b5260405160405180910390a460008473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b8152600401610e2b929190612452565b602060405180830381600087803b158015610e4557600080fd5b505af1158015610e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7d91906121a5565b905080610eb6576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b670de0b6b3a7640000610ec833611143565b1015610f09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f009061255b565b60405180910390fd5b50505060016000819055505050565b6000806000905060005b60038054905081101561102557600060038281548110610f4557610f4461283d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000610fff838361102f565b9050808561100d9190612619565b9450505050808061101d90612796565b915050610f22565b5080915050919050565b600080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156110dc57600080fd5b505afa1580156110f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611114919061222c565b505050915050670de0b6b3a7640000848261112f91906126a0565b611139919061266f565b9250505092915050565b600080600061115184611241565b915091506000606460508361116691906126a0565b611170919061266f565b9050600083141561118f5768056bc75e2d6310000093505050506111b4565b82670de0b6b3a7640000826111a491906126a0565b6111ae919061266f565b93505050505b919050565b6111c1611d39565b73ffffffffffffffffffffffffffffffffffffffff166111df611376565b73ffffffffffffffffffffffffffffffffffffffff1614611235576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122c9061251b565b60405180910390fd5b61123f6000611d41565b565b60008061124d83610f18565b91506112588361125f565b9050915091565b6000806000905060005b60038054905081101561136c5760006003828154811061128c5761128b61283d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000611346838361102f565b905080856113549190612619565b9450505050808061136490612796565b915050611269565b5080915050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b605081565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6005602052816000526040600020602052806000526040600020600091509150505481565b600581565b61140a611d39565b73ffffffffffffffffffffffffffffffffffffffff16611428611376565b73ffffffffffffffffffffffffffffffffffffffff161461147e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114759061251b565b60405180910390fd5b600080600380549050905060005b81811015611522578473ffffffffffffffffffffffffffffffffffffffff16600382815481106114bf576114be61283d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561150f5760019250611522565b808061151a90612796565b91505061148c565b508161158c576003849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f4f9bd0d8360fd59a62c52cf8b386f7c7b65097c9e336e860d08ffb9df34067d160405160405180910390a350505050565b600260005414156116b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a79061257b565b60405180910390fd5b6002600081905550670de0b6b3a76400006116ca84611143565b1061170a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117019061253b565b60405180910390fd5b60006002600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611795919061266f565b905060006117a3848361102f565b9050600081116117e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117df9061249b565b60405180910390fd5b600060646005836117f991906126a0565b611803919061266f565b9050600061181c8584846118179190612619565b6104ad565b90508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fcea6068021f706074af611c2a4b6b08820c5b8223a80149684c64c60ce7be3cc86336040516118949291906125b6565b60405180910390a46118a7878786611bd6565b6118b2878683611e07565b505050506001600081905550505050565b670de0b6b3a764000081565b6118d7611d39565b73ffffffffffffffffffffffffffffffffffffffff166118f5611376565b73ffffffffffffffffffffffffffffffffffffffff161461194b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119429061251b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b29061247b565b60405180910390fd5b6119c481611d41565b50565b60026000541415611a0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a049061257b565b60405180910390fd5b6002600081905550806000811415611a51576040517ff45911f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b07906124db565b60405180910390fd5b818373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb60405160405180910390a4611b76338484611e07565b670de0b6b3a7640000611b8833611143565b1015611bc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc09061255b565b60405180910390fd5b5060016000819055505050565b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c6291906126fa565b9250508190555060008273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401611ca89392919061241b565b602060405180830381600087803b158015611cc257600080fd5b505af1158015611cd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfa91906121a5565b905080611d33576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611ec6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ebd906124bb565b60405180910390fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f5291906126fa565b9250508190555060008273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401611f96929190612452565b602060405180830381600087803b158015611fb057600080fd5b505af1158015611fc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe891906121a5565b905080612021576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60008135905061203681612a08565b92915050565b60008151905061204b81612a1f565b92915050565b60008151905061206081612a36565b92915050565b60008135905061207581612a4d565b92915050565b60008151905061208a81612a4d565b92915050565b60008151905061209f81612a64565b92915050565b6000602082840312156120bb576120ba61286c565b5b60006120c984828501612027565b91505092915050565b600080604083850312156120e9576120e861286c565b5b60006120f785828601612027565b925050602061210885828601612027565b9150509250929050565b60008060006060848603121561212b5761212a61286c565b5b600061213986828701612027565b935050602061214a86828701612027565b925050604061215b86828701612027565b9150509250925092565b6000806040838503121561217c5761217b61286c565b5b600061218a85828601612027565b925050602061219b85828601612066565b9150509250929050565b6000602082840312156121bb576121ba61286c565b5b60006121c98482850161203c565b91505092915050565b6000602082840312156121e8576121e761286c565b5b60006121f684828501612066565b91505092915050565b6000602082840312156122155761221461286c565b5b60006122238482850161207b565b91505092915050565b600080600080600060a086880312156122485761224761286c565b5b600061225688828901612090565b955050602061226788828901612051565b94505060406122788882890161207b565b93505060606122898882890161207b565b925050608061229a88828901612090565b9150509295509295909350565b6122b08161272e565b82525050565b60006122c3602683612608565b91506122ce82612871565b604082019050919050565b60006122e6601e83612608565b91506122f1826128c0565b602082019050919050565b6000612309601c83612608565b9150612314826128e9565b602082019050919050565b600061232c601083612608565b915061233782612912565b602082019050919050565b600061234f601b83612608565b915061235a8261293b565b602082019050919050565b6000612372602083612608565b915061237d82612964565b602082019050919050565b6000612395601c83612608565b91506123a08261298d565b602082019050919050565b60006123b8601b83612608565b91506123c3826129b6565b602082019050919050565b60006123db601f83612608565b91506123e6826129df565b602082019050919050565b6123fa81612776565b82525050565b600060208201905061241560008301846122a7565b92915050565b600060608201905061243060008301866122a7565b61243d60208301856122a7565b61244a60408301846123f1565b949350505050565b600060408201905061246760008301856122a7565b61247460208301846123f1565b9392505050565b60006020820190508181036000830152612494816122b6565b9050919050565b600060208201905081810360008301526124b4816122d9565b9050919050565b600060208201905081810360008301526124d4816122fc565b9050919050565b600060208201905081810360008301526124f48161231f565b9050919050565b6000602082019050818103600083015261251481612342565b9050919050565b6000602082019050818103600083015261253481612365565b9050919050565b6000602082019050818103600083015261255481612388565b9050919050565b60006020820190508181036000830152612574816123ab565b9050919050565b60006020820190508181036000830152612594816123ce565b9050919050565b60006020820190506125b060008301846123f1565b92915050565b60006040820190506125cb60008301856123f1565b6125d860208301846122a7565b9392505050565b60006040820190506125f460008301856123f1565b61260160208301846123f1565b9392505050565b600082825260208201905092915050565b600061262482612776565b915061262f83612776565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612664576126636127df565b5b828201905092915050565b600061267a82612776565b915061268583612776565b9250826126955761269461280e565b5b828204905092915050565b60006126ab82612776565b91506126b683612776565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156126ef576126ee6127df565b5b828202905092915050565b600061270582612776565b915061271083612776565b925082821015612723576127226127df565b5b828203905092915050565b600061273982612756565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b60006127a182612776565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127d4576127d36127df565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f43686f6f7365206120646966666572656e74207265706179546f6b656e210000600082015250565b7f4e6f7420656e6f7567682066756e647320746f20776974686472617700000000600082015250565b7f4e6f7420656e6f7567682066756e647300000000000000000000000000000000600082015250565b7f4e6f7420656e6f75676820746f6b656e7320746f20626f72726f770000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4163636f756e742063616e2774206265206c6971756964617465642100000000600082015250565b7f506c6174666f726d2077696c6c20676f20696e736f6c76656e74210000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b612a118161272e565b8114612a1c57600080fd5b50565b612a2881612740565b8114612a3357600080fd5b50565b612a3f8161274c565b8114612a4a57600080fd5b50565b612a5681612776565b8114612a6157600080fd5b50565b612a6d81612780565b8114612a7857600080fd5b5056fea26469706673582212201adf3a9023dfce1590c76f0b8b747ac2e54ce743331074ddb544f73d0711e10d64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 161,
        "contract": "contracts/Lending.sol:Lending",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 53,
        "contract": "contracts/Lending.sol:Lending",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 969,
        "contract": "contracts/Lending.sol:Lending",
        "label": "s_tokenToPriceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 972,
        "contract": "contracts/Lending.sol:Lending",
        "label": "s_allowedTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 978,
        "contract": "contracts/Lending.sol:Lending",
        "label": "s_accountToTokenDeposits",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 984,
        "contract": "contracts/Lending.sol:Lending",
        "label": "s_accountToTokenBorrows",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}