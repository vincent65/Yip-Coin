{
  "address": "0x9A676e781A523b5d0C0e43731313A708CB607508",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_daiAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NeedsMoreThanZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_optionId",
          "type": "uint256"
        }
      ],
      "name": "OptionNotValid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CallOptionBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CallOptionExercised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "writer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strike",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "CallOptionOpen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "writer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "FundsRetrieved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "Id",
          "type": "uint256"
        }
      ],
      "name": "OptionExpiresWorthless",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "PutOptionBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "PutOptionExercised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "writer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strike",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "PutOptionOpen",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_optionId",
          "type": "uint256"
        }
      ],
      "name": "buyCallOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_optionId",
          "type": "uint256"
        }
      ],
      "name": "buyPutOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_optionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_daiAmount",
          "type": "uint256"
        }
      ],
      "name": "exerciseCallOption",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_optionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_daiAmount",
          "type": "uint256"
        }
      ],
      "name": "exercisePutOption",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountInDai",
          "type": "uint256"
        }
      ],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_optionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_daiAmount",
          "type": "uint256"
        }
      ],
      "name": "optionExpiresWorthless",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_optionId",
          "type": "uint256"
        }
      ],
      "name": "retrieveExpiredFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_optionCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_optionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_optionIdToOption",
      "outputs": [
        {
          "internalType": "address",
          "name": "writer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strike",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premiumDue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "enum Options.OptionState",
          "name": "optionState",
          "type": "uint8"
        },
        {
          "internalType": "enum Options.OptionType",
          "name": "optionType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_tokenToEthFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_tradersPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_strike",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_premiumDue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_daysToExpiry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_daiAmount",
          "type": "uint256"
        }
      ],
      "name": "writeCallOption",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_strike",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_premiumDue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_daysToExpiry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_daiAmount",
          "type": "uint256"
        }
      ],
      "name": "writePutOption",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x006c36d1197fa53df1da0ea431071e800cea1c27f574b71838133863d2fb02c0",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9A676e781A523b5d0C0e43731313A708CB607508",
    "transactionIndex": 0,
    "gasUsed": "3997072",
    "logsBloom": "0x
    "blockHash": "0xe1b1a2f26729bcbf3d3dbcfe63a207d8379119097fb12e8db5be04411cc3cad0",
    "transactionHash": "0x006c36d1197fa53df1da0ea431071e800cea1c27f574b71838133863d2fb02c0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 15,
        "transactionHash": "0x006c36d1197fa53df1da0ea431071e800cea1c27f574b71838133863d2fb02c0",
        "address": "0x9A676e781A523b5d0C0e43731313A708CB607508",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe1b1a2f26729bcbf3d3dbcfe63a207d8379119097fb12e8db5be04411cc3cad0"
      }
    ],
    "blockNumber": 15,
    "cumulativeGasUsed": "3997072",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
  ],
  "numDeployments": 1,
  "solcInputHash": "f46110d259fb4b96321f34a30f5848dd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daiAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NeedsMoreThanZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"OptionNotValid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CallOptionBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CallOptionExercised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"writer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CallOptionOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"writer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FundsRetrieved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"}],\"name\":\"OptionExpiresWorthless\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PutOptionBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PutOptionExercised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"writer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PutOptionOpen\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"buyCallOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"buyPutOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daiAmount\",\"type\":\"uint256\"}],\"name\":\"exerciseCallOption\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daiAmount\",\"type\":\"uint256\"}],\"name\":\"exercisePutOption\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountInDai\",\"type\":\"uint256\"}],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daiAmount\",\"type\":\"uint256\"}],\"name\":\"optionExpiresWorthless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"retrieveExpiredFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_optionCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_optionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_optionIdToOption\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"writer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumDue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"enum Options.OptionState\",\"name\":\"optionState\",\"type\":\"uint8\"},{\"internalType\":\"enum Options.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_tokenToEthFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_tradersPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_premiumDue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daysToExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daiAmount\",\"type\":\"uint256\"}],\"name\":\"writeCallOption\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_premiumDue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daysToExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daiAmount\",\"type\":\"uint256\"}],\"name\":\"writePutOption\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyCallOption(uint256)\":{\"details\":\"Buy an open call option.\",\"params\":{\"_optionId\":\"would need to be used to access the correct option. Every buyer must have a seller.\"}},\"buyPutOption(uint256)\":{\"details\":\"Buy an open put option.\",\"params\":{\"_optionId\":\"Would need to be used to access the correct option. Every buyer must have a seller.\"}},\"constructor\":{\"details\":\"CHAINLINK PRICEFEEDS & DAI ADDRESSES NETWORK: KOVAN DAI/ETH Address: 0x22B58f1EbEDfCA50feF632bD73368b2FdA96D541 Kovan DAI Addr: 0x4f96fe3b7a6cf9725f59d353f723c1bdb64ca6aa NETWORK: RINKEBY DAI/ETH Address: 0x74825DbC8BF76CC4e9494d0ecB210f676Efa001D Rinkeby DAI Addr: 0x4f96fe3b7a6cf9725f59d353f723c1bdb64ca6aa (faucet token)\"},\"exerciseCallOption(uint256,uint256)\":{\"details\":\"The buyer can exercise a call option at expiration.\",\"params\":{\"_daiAmount\":\"is the amount of dai\",\"_optionId\":\"would need to be used to access the correct option. Every buyer must have a seller.\"}},\"exercisePutOption(uint256,uint256)\":{\"details\":\"The buyer can exercise a put option at expiration.\",\"params\":{\"_daiAmount\":\"is the amount of dai\",\"_optionId\":\"would need to be used to access the correct option. Every buyer must have a seller.\"}},\"getPriceFeed(uint256)\":{\"details\":\"get the DaiEthPriceFeed (18 decimals) from Chainlink (look at consrtuctor for contract addresses)\",\"params\":{\"_amountInDai\":\"the amount of Dai\"}},\"optionExpiresWorthless(uint256,uint256)\":{\"details\":\"The writer can cancel options that have expired and are worthless\",\"params\":{\"_daiAmount\":\"is the amount of dai\",\"_optionId\":\"would need to be used to access the correct option. Every buyer must have a seller.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"retrieveExpiredFunds(uint256)\":{\"details\":\"If options are worthless(cancelled), then writer can get back ETH collateral\",\"params\":{\"_optionId\":\"would need to be used to access the correct option. Every buyer must have a seller.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"writeCallOption(uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"A seller writes a call option. ETH is sent to contract for collateral.\",\"params\":{\"_amount\":\"is the number of options to be written.\",\"_daiAmount\":\"is the amount of dai\",\"_daysToExpiry\":\"days until option expires and can then be exercised or cancelled.\",\"_premiumDue\":\"the cost of the option call paid by buyer in dai. (For dapp, prob determined on frontend and NOT by the WRITER)\",\"_strike\":\"is the price of ETH in DAI. Here, strike == current spot price,(for a Dapp, this'd probably be best deteremined on frontend)\"}},\"writePutOption(uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"A seller writes a put option. ETH is sent to contract for collateral.\",\"params\":{\"_amount\":\"is the number of options to be written.\",\"_daiAmount\":\"is the amount of dai\",\"_daysToExpiry\":\"days until option expires and can then be exercised or cancelled.\",\"_premiumDue\":\"the cost of the option call paid by buyer (in DAI).\",\"_strike\":\"is the price of ETH in DAI. Here, strike == current spot price.\"}}},\"title\":\"Covered European-Style Options\",\"version\":1},\"userdoc\":{\"errors\":{\"TransferFailed()\":[{\"notice\":\"ERRORS///\"}]},\"events\":{\"CallOptionOpen(uint256,address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"EVENTS///\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"The purpose of this is to be a basic option market implementation. It ignores a lot of option specifis (like the Greeks, for example). This Smart Contract allows for the buying/writing of Covered Calls & Cash-Secured Puts with ETH as the underlying. Calls: Let you buy an asset(underlying) at a set price(the strike) on or after a specific date(expiration). Puts: Let you sell an asset(underlying) at a set price(the strike) on or after a specific date (expiration). Covered Call: The seller(writer) transfers ETH for collateral(the underlying) and writes a Covered Call. The buyer pays premium w DAI. Covered Call: At expiration, the buyer has the right to ETH at strike price if spot(market) price is greater than strike price. Settles with DAI. Cash-Secured Put: The writer transfers ETH for collateral. Buyer pays premium w DAI. Cash-Secured Put: At expiration, if market price less than strike, buyer has right to sell ETH at the strike to the writer. Settles w DAI. All options have the following properties: Strike price - The price at which the underlying asset can either be bought or sold. In this contract the strike == the initial spot price for simplicity. Expiry - The date at which the option expires. Premium - The price of the options contract that buyer pays. This smart contract supports two strategies for the option writer: 1. Covered Calls - You sell upside on ETH while you hold it for yield, which comes from premium (Netural/Bullish on ETH). 2. Cash-secured Puts - You earn yield on ETH (Bullish).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Options.sol\":\"Options\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Options.sol\":{\"content\":\"// @notice This contract is in progress!!\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Covered European-Style Options\\n/// @notice The purpose of this is to be a basic option market implementation. It ignores a lot of option specifis (like the Greeks, for example).\\n/// This Smart Contract allows for the buying/writing of Covered Calls & Cash-Secured Puts with ETH as the underlying.\\n/// Calls: Let you buy an asset(underlying) at a set price(the strike) on or after a specific date(expiration).\\n/// Puts: Let you sell an asset(underlying) at a set price(the strike) on or after a specific date (expiration).\\n/// Covered Call: The seller(writer) transfers ETH for collateral(the underlying) and writes a Covered Call. The buyer pays premium w DAI.\\n/// Covered Call: At expiration, the buyer has the right to ETH at strike price if spot(market) price is greater than strike price. Settles with DAI.\\n/// Cash-Secured Put: The writer transfers ETH for collateral. Buyer pays premium w DAI.\\n/// Cash-Secured Put: At expiration, if market price less than strike, buyer has right to sell ETH at the strike to the writer. Settles w DAI.\\n/// All options have the following properties:\\n/// Strike price - The price at which the underlying asset can either be bought or sold. In this contract the strike == the initial spot price for simplicity.\\n/// Expiry - The date at which the option expires.\\n/// Premium - The price of the options contract that buyer pays.\\n/// This smart contract supports two strategies for the option writer:\\n/// 1. Covered Calls - You sell upside on ETH while you hold it for yield, which comes from premium (Netural/Bullish on ETH).\\n/// 2. Cash-secured Puts - You earn yield on ETH (Bullish).\\n\\ncontract Options is ReentrancyGuard, Ownable {\\n\\n    ///STORAGE///\\n\\n    AggregatorV3Interface internal daiEthPriceFeed;\\n\\n    IERC20 dai;\\n\\n    uint256 public s_optionCounter;\\n\\n    uint256 public s_optionId;\\n\\n    mapping(address => address) public s_tokenToEthFeed;\\n    mapping(uint256 => Option) public s_optionIdToOption;\\n    mapping(address => uint256[]) public s_tradersPosition;\\n\\n    enum OptionState {\\n        Open,\\n        Bought,\\n        Cancelled,\\n        Exercised\\n    }\\n\\n    enum OptionType {\\n        Call,\\n        Put\\n    }\\n\\n    struct Option {\\n        address writer;\\n        address buyer;\\n        uint256 amount;\\n        uint256 strike;\\n        uint256 premiumDue;\\n        uint256 expiration;\\n        uint256 collateral;\\n        OptionState optionState;\\n        OptionType optionType;\\n    }\\n\\n    ///ERRORS///\\n\\n    error TransferFailed();\\n    error NeedsMoreThanZero();\\n    error OptionNotValid(uint256 _optionId);\\n\\n    ///EVENTS///\\n\\n    event CallOptionOpen(uint256 id, address writer, uint256 amount, uint256 strike, uint256 premium, uint256 expiration, uint256 value);\\n    event PutOptionOpen(uint256 id, address writer, uint256 amount, uint256 strike, uint256 premium, uint256 expiration, uint256 value);\\n    event CallOptionBought(address buyer, uint256 id);\\n    event PutOptionBought(address buyer, uint256 id);\\n    event CallOptionExercised(address buyer, uint256 id);\\n    event PutOptionExercised(address buyer, uint256 id);\\n    event OptionExpiresWorthless(address buyer, uint256 Id);\\n    event FundsRetrieved(address writer, uint256 id, uint256 value);\\n    //event AllowedTokenSet(address token, uint256 price);\\n\\n    ///@dev CHAINLINK PRICEFEEDS & DAI ADDRESSES\\n    ///NETWORK: KOVAN\\n    ///DAI/ETH Address: 0x22B58f1EbEDfCA50feF632bD73368b2FdA96D541\\n    ///Kovan DAI Addr: 0x4f96fe3b7a6cf9725f59d353f723c1bdb64ca6aa\\n    ///NETWORK: RINKEBY\\n    ///DAI/ETH Address: 0x74825DbC8BF76CC4e9494d0ecB210f676Efa001D\\n    ///Rinkeby DAI Addr: 0x4f96fe3b7a6cf9725f59d353f723c1bdb64ca6aa (faucet token)\\n    constructor(address _priceFeed, address _daiAddr) {\\n        daiEthPriceFeed = AggregatorV3Interface(_priceFeed);\\n        dai = IERC20(_daiAddr);\\n    }\\n\\n    ///@dev A seller writes a call option. ETH is sent to contract for collateral.\\n    ///@param _amount is the number of options to be written.\\n    ///@param _strike is the price of ETH in DAI. Here, strike == current spot price,(for a Dapp, this'd probably be best deteremined on frontend)\\n    ///@param _premiumDue the cost of the option call paid by buyer in dai. (For dapp, prob determined on frontend and NOT by the WRITER)\\n    ///@param _daysToExpiry days until option expires and can then be exercised or cancelled.\\n    ///@param _daiAmount is the amount of dai\\n    function writeCallOption(\\n        uint256 _amount,\\n        uint256 _strike,\\n        uint256 _premiumDue,\\n        uint256 _daysToExpiry,\\n        uint256 _daiAmount\\n    ) external payable moreThanZero(_amount, _strike, _premiumDue) {\\n\\n        //returns x amt of ether for 1 dai...1DAI/xETH\\n        uint256 marketPriceEthPerOneDai = _amount * getPriceFeed(_daiAmount);\\n        //returns x amt of dai per 1 eth...1ETH/xDAI\\n        uint256 marketPriceDaiPerOneEth = _daiAmount /  marketPriceEthPerOneDai;\\n\\n        //eth sent to contract for collateral MUST equal current spot price (1DAI/xETH)\\n        require(msg.value == marketPriceEthPerOneDai, \\\"CALL: ETH VALUE MUST EQUAL SPOT PRICE\\\");\\n        //So, In this contract the strike == the spot price for simplicity.\\n        require(marketPriceDaiPerOneEth == _strike, \\\"CALL: WRONG ETH COLLATERAL\\\");\\n        \\n        s_optionIdToOption[s_optionCounter] = Option(\\n            payable(msg.sender),\\n            address(0),\\n            _amount,\\n            _strike,\\n            _premiumDue,\\n            block.timestamp + _daysToExpiry,\\n            msg.value,\\n            OptionState.Open,\\n            OptionType.Call\\n        );\\n\\n        s_tradersPosition[msg.sender].push(s_optionCounter);\\n        s_optionId = s_optionCounter++;\\n\\n        emit CallOptionOpen(s_optionId, msg.sender, _amount, _strike, _premiumDue, block.timestamp + _daysToExpiry, msg.value);\\n    }\\n\\n    ///@dev Buy an open call option.\\n    ///@param _optionId would need to be used to access the correct option. Every buyer must have a seller.\\n    function buyCallOption(uint256 _optionId)\\n        external\\n        optionExists(_optionId)\\n        isValidOpenOption(_optionId)\\n        nonReentrant\\n    {\\n        Option memory option = s_optionIdToOption[_optionId];\\n\\n        require(option.optionType == OptionType.Call, \\\"NOT A CALL\\\");\\n\\n        //buyer pays w dai\\n        bool paid = dai.transferFrom(msg.sender, address(this), option.premiumDue);\\n        if (!paid) revert TransferFailed();\\n\\n        //dai transfered to writer\\n        paid = dai.transfer(option.writer, option.premiumDue);\\n        if (!paid) revert TransferFailed();\\n\\n        s_optionIdToOption[_optionId].buyer = msg.sender;\\n        s_optionIdToOption[_optionId].optionState = OptionState.Bought;\\n        s_tradersPosition[msg.sender].push(_optionId);\\n\\n        emit CallOptionBought(msg.sender, _optionId);\\n    }\\n\\n    ///@dev A seller writes a put option. ETH is sent to contract for collateral.\\n    ///@param _amount is the number of options to be written.\\n    ///@param _strike is the price of ETH in DAI. Here, strike == current spot price.\\n    ///@param _premiumDue the cost of the option call paid by buyer (in DAI).\\n    ///@param _daysToExpiry days until option expires and can then be exercised or cancelled.\\n    ///@param _daiAmount is the amount of dai\\n    function writePutOption(\\n        uint256 _amount,\\n        uint256 _strike,\\n        uint256 _premiumDue,\\n        uint256 _daysToExpiry,\\n        uint256 _daiAmount\\n    ) external payable moreThanZero(_amount, _strike, _premiumDue) {\\n\\n        //returns x amt of ether for 1 dai...1DAI/ETH\\n        uint256 marketPriceEthPerOneDai = _amount * getPriceFeed(_daiAmount);\\n        //returns x amt of dai per 1 eth...1ETH/DAI\\n        uint256 marketPriceDaiPerOneEth = _daiAmount /  marketPriceEthPerOneDai;\\n\\n        //Eth sent to contract for collateral MUST equal the value of ETH vs DAI.\\n        require(msg.value == marketPriceEthPerOneDai, \\\"PUT: ETH VALUE MUST EQUAL DAI\\\");\\n        //So, In this contract the strike == the spot price for simplicity.\\n        require(marketPriceDaiPerOneEth == _strike, \\\"PUT: WRONG ETH COLLATERAL\\\");\\n\\n        s_optionIdToOption[s_optionCounter] = Option(\\n            payable(msg.sender),\\n            address(0),\\n            _amount,\\n            _strike,\\n            _premiumDue,\\n            block.timestamp + _daysToExpiry,\\n            msg.value,\\n            OptionState.Open,\\n            OptionType.Put\\n        );\\n\\n        s_tradersPosition[msg.sender].push(s_optionCounter);\\n        s_optionId = s_optionCounter++;\\n\\n        emit PutOptionOpen(s_optionId, msg.sender, _amount, _strike, _premiumDue, block.timestamp + _daysToExpiry, msg.value);\\n    }\\n\\n    ///@dev Buy an open put option.\\n    ///@param _optionId Would need to be used to access the correct option. Every buyer must have a seller.\\n    function buyPutOption(uint256 _optionId)\\n        external\\n        optionExists(_optionId)\\n        isValidOpenOption(_optionId)\\n        nonReentrant\\n    {\\n        Option memory option = s_optionIdToOption[_optionId];\\n\\n        require(option.optionType == OptionType.Put, \\\"NOT A PUT\\\");\\n\\n        //pay premium w dai\\n        bool paid = dai.transferFrom(msg.sender, address(this), option.premiumDue);\\n        if (!paid) revert TransferFailed();\\n\\n        //transfer premium to writer\\n        paid = dai.transfer(option.writer, option.premiumDue);\\n        if (!paid) revert TransferFailed();\\n\\n        s_optionIdToOption[_optionId].buyer = msg.sender;\\n        s_optionIdToOption[_optionId].optionState = OptionState.Bought;\\n        s_tradersPosition[msg.sender].push(_optionId);\\n\\n        emit PutOptionBought(msg.sender, _optionId);\\n    }\\n\\n    ///@dev The buyer can exercise a call option at expiration.\\n    ///@param _optionId would need to be used to access the correct option. Every buyer must have a seller.\\n    ///@param _daiAmount is the amount of dai\\n    function exerciseCallOption(uint256 _optionId, uint256 _daiAmount)\\n        external\\n        payable\\n        optionExists(_optionId)\\n        nonReentrant\\n    {\\n        Option memory option = s_optionIdToOption[_optionId];\\n\\n        require(msg.sender == option.buyer, \\\"NOT BUYER\\\");\\n        require(option.optionState == OptionState.Bought, \\\"NEVER BOUGHT\\\");\\n        require(option.expiration < block.timestamp, \\\"HAS NOT EXPIRED\\\");\\n\\n        //returns # of dai for 1 ETH. Ex: 1 dai = ~0.0002eth in real life right now\\n        uint256 marketPriceEthPerOneDai = option.amount * getPriceFeed(_daiAmount);\\n        \\n        //returns 1 eth = x amt of dai...\\n        uint256 marketPriceDaiPerOneEth = _daiAmount /  marketPriceEthPerOneDai;\\n\\n        //If spot < strike, option is worthless\\n        require(marketPriceDaiPerOneEth > option.strike, \\\"NOT GREATER THAN STRIKE\\\");\\n\\n        //buyer gets right to buy ETH at strike w DAI\\n        bool paid = dai.transferFrom(msg.sender, address(this), option.strike);\\n        if (!paid) revert TransferFailed();\\n\\n        //transfer to msg.sender the writer's ETH collateral\\n        require(address(this).balance >= option.collateral, \\\"NOT ENOUGH ETH BALANCE\\\");\\n        (paid, ) = payable(msg.sender).call{value: option.collateral}(\\\"\\\");\\n        if(!paid) revert TransferFailed();\\n\\n        //transfer dai to option writer\\n        paid = dai.transfer(option.writer, option.strike);\\n        if (!paid) revert TransferFailed();\\n     \\n        s_optionIdToOption[_optionId].optionState = OptionState.Exercised;\\n\\n        emit CallOptionExercised(msg.sender, _optionId);\\n    }\\n\\n    ///@dev The buyer can exercise a put option at expiration.\\n    ///@param _optionId would need to be used to access the correct option. Every buyer must have a seller.\\n    ///@param _daiAmount is the amount of dai\\n    function exercisePutOption(uint256 _optionId, uint256 _daiAmount)\\n        external\\n        payable\\n        optionExists(_optionId)\\n        nonReentrant\\n    {\\n        Option memory option = s_optionIdToOption[_optionId];\\n\\n        require(msg.sender == option.buyer, \\\"NOT BUYER\\\");\\n        require(option.optionState == OptionState.Bought, \\\"NEVER BOUGHT\\\");\\n        require(option.expiration < block.timestamp, \\\"HAS NOT EXPIRED\\\");\\n\\n        //returns # of dai for 1 ETH. Ex: 1 dai = ~0.0002eth in real life right now\\n        uint256 marketPriceEthPerOneDai = option.amount * getPriceFeed(_daiAmount);\\n\\n        //returns 1 eth = x amt of dai...\\n        uint256 marketPriceDaiPerOneEth = _daiAmount /  marketPriceEthPerOneDai;\\n        \\n        //if spot > strike, option is worthless\\n        require(marketPriceDaiPerOneEth < option.strike, \\\"MUST BE LESS THAN STRIKE\\\");\\n\\n        //buyer gets to sell ETH(gets collateral) for DAI at strike to option writer\\n        bool paid = dai.transferFrom(msg.sender, address(this), option.strike);\\n        if (!paid) revert TransferFailed();\\n\\n        (paid,) = payable(msg.sender).call{value: option.collateral}(\\\"\\\");\\n        if(!paid) revert TransferFailed();\\n\\n        //transfer dai to option writer\\n        paid = dai.transfer(option.writer, option.strike);\\n        if (!paid) revert TransferFailed();\\n     \\n        s_optionIdToOption[_optionId].optionState = OptionState.Exercised;\\n\\n        emit PutOptionExercised(msg.sender, _optionId);\\n    }\\n\\n    ///@dev The writer can cancel options that have expired and are worthless\\n    ///@param _optionId would need to be used to access the correct option. Every buyer must have a seller.\\n    ///@param _daiAmount is the amount of dai\\n    function optionExpiresWorthless(uint256 _optionId, uint256 _daiAmount) external optionExists(_optionId) {\\n\\n        Option memory option = s_optionIdToOption[_optionId];\\n\\n        require(s_optionIdToOption[_optionId].writer == msg.sender, \\\"NOT WRITER\\\");\\n        require(option.optionState == OptionState.Bought, \\\"NEVER BOUGHT\\\");\\n        require(option.expiration <= block.timestamp, \\\"NOT EXPIRED\\\");\\n\\n        uint256 marketPriceEthPerOneDai = option.amount * getPriceFeed(_daiAmount);\\n\\n        uint256 marketPriceDaiPerOneEth = _daiAmount /  marketPriceEthPerOneDai;\\n\\n        if (option.optionType == OptionType.Call) {\\n\\n            //For call, if spot < strike, call options expire worthless\\n            require(marketPriceDaiPerOneEth < option.strike, \\\"PRICE NOT LESS THAN STRIKE\\\");\\n            s_optionIdToOption[_optionId].optionState = OptionState.Cancelled;\\n\\n        } else {\\n\\n            //For put, if spot > strike, put options expire worthless\\n            require(marketPriceDaiPerOneEth > option.strike, \\\"PRICE NOT GREATER THAN STRIKE\\\");\\n            s_optionIdToOption[_optionId].optionState = OptionState.Cancelled;\\n        }\\n\\n        emit OptionExpiresWorthless(msg.sender, _optionId);\\n    }\\n\\n    ///@dev If options are worthless(cancelled), then writer can get back ETH collateral\\n    ///@param _optionId would need to be used to access the correct option. Every buyer must have a seller.\\n    function retrieveExpiredFunds(uint256 _optionId) external nonReentrant {\\n        Option memory option = s_optionIdToOption[_optionId];\\n        \\n        require(option.optionState == OptionState.Cancelled, \\\"NOT CANCELED\\\");\\n        require(option.expiration < block.timestamp, \\\"NOT EXPIRED\\\");\\n        require(msg.sender == option.writer, \\\"NOT WRITER\\\");\\n\\n        //check contract balance is enough for transfer\\n        require(address(this).balance >= option.collateral, \\\"NOT ENOUGH ETH\\\");\\n\\n        //return ETH collateral to writer if options expired worthless(cancelled)\\n        (bool paid,) = payable(msg.sender).call{value: option.collateral}(\\\"\\\");\\n        if(!paid) revert TransferFailed();\\n\\n        emit FundsRetrieved(msg.sender, _optionId, option.collateral);\\n    }\\n\\n    /*********************************/\\n    /* Oracle (Chainlink) Functions */\\n    /*********************************/\\n\\n    ///@dev get the DaiEthPriceFeed (18 decimals) from Chainlink (look at consrtuctor for contract addresses)\\n    ///@param _amountInDai the amount of Dai\\n    function getPriceFeed(uint256 _amountInDai) public view returns (uint256) {\\n        (, int256 price, , , ) = daiEthPriceFeed.latestRoundData();\\n        return (uint256(price) * _amountInDai) / 1e18;\\n    }\\n\\n    /**************/\\n    /* Modifiers */\\n    /*************/\\n\\n    modifier moreThanZero(\\n        uint256 amount,\\n        uint256 strikePrice,\\n        uint256 premiumCost\\n    ) {\\n        if (amount <= 0 || strikePrice <= 0 || premiumCost <= 0) revert NeedsMoreThanZero();\\n        _;\\n    }\\n\\n    modifier optionExists(uint256 optionId) {\\n        if (s_optionIdToOption[optionId].writer == address(0)) revert OptionNotValid(optionId);\\n        _;\\n    }\\n\\n    modifier isValidOpenOption(uint256 optionId) {\\n        if (\\n            s_optionIdToOption[optionId].optionState != OptionState.Open ||\\n            s_optionIdToOption[optionId].expiration > block.timestamp\\n            // || s_optionIdToOption[optionId].buyer == address(0)\\n        ) revert OptionNotValid(optionId);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfee7a2ba3ee3c13c4fceb4519a2087e382cfa256634d4fd86afea763d9412b1d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyCallOption(uint256)": {
        "details": "Buy an open call option.",
        "params": {
          "_optionId": "would need to be used to access the correct option. Every buyer must have a seller."
        }
      },
      "buyPutOption(uint256)": {
        "details": "Buy an open put option.",
        "params": {
          "_optionId": "Would need to be used to access the correct option. Every buyer must have a seller."
        }
      },
      "constructor": {
        "details": "CHAINLINK PRICEFEEDS & DAI ADDRESSES NETWORK: KOVAN DAI/ETH Address: 0x22B58f1EbEDfCA50feF632bD73368b2FdA96D541 Kovan DAI Addr: 0x4f96fe3b7a6cf9725f59d353f723c1bdb64ca6aa NETWORK: RINKEBY DAI/ETH Address: 0x74825DbC8BF76CC4e9494d0ecB210f676Efa001D Rinkeby DAI Addr: 0x4f96fe3b7a6cf9725f59d353f723c1bdb64ca6aa (faucet token)"
      },
      "exerciseCallOption(uint256,uint256)": {
        "details": "The buyer can exercise a call option at expiration.",
        "params": {
          "_daiAmount": "is the amount of dai",
          "_optionId": "would need to be used to access the correct option. Every buyer must have a seller."
        }
      },
      "exercisePutOption(uint256,uint256)": {
        "details": "The buyer can exercise a put option at expiration.",
        "params": {
          "_daiAmount": "is the amount of dai",
          "_optionId": "would need to be used to access the correct option. Every buyer must have a seller."
        }
      },
      "getPriceFeed(uint256)": {
        "details": "get the DaiEthPriceFeed (18 decimals) from Chainlink (look at consrtuctor for contract addresses)",
        "params": {
          "_amountInDai": "the amount of Dai"
        }
      },
      "optionExpiresWorthless(uint256,uint256)": {
        "details": "The writer can cancel options that have expired and are worthless",
        "params": {
          "_daiAmount": "is the amount of dai",
          "_optionId": "would need to be used to access the correct option. Every buyer must have a seller."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "retrieveExpiredFunds(uint256)": {
        "details": "If options are worthless(cancelled), then writer can get back ETH collateral",
        "params": {
          "_optionId": "would need to be used to access the correct option. Every buyer must have a seller."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "writeCallOption(uint256,uint256,uint256,uint256,uint256)": {
        "details": "A seller writes a call option. ETH is sent to contract for collateral.",
        "params": {
          "_amount": "is the number of options to be written.",
          "_daiAmount": "is the amount of dai",
          "_daysToExpiry": "days until option expires and can then be exercised or cancelled.",
          "_premiumDue": "the cost of the option call paid by buyer in dai. (For dapp, prob determined on frontend and NOT by the WRITER)",
          "_strike": "is the price of ETH in DAI. Here, strike == current spot price,(for a Dapp, this'd probably be best deteremined on frontend)"
        }
      },
      "writePutOption(uint256,uint256,uint256,uint256,uint256)": {
        "details": "A seller writes a put option. ETH is sent to contract for collateral.",
        "params": {
          "_amount": "is the number of options to be written.",
          "_daiAmount": "is the amount of dai",
          "_daysToExpiry": "days until option expires and can then be exercised or cancelled.",
          "_premiumDue": "the cost of the option call paid by buyer (in DAI).",
          "_strike": "is the price of ETH in DAI. Here, strike == current spot price."
        }
      }
    },
    "title": "Covered European-Style Options",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "TransferFailed()": [
        {
          "notice": "ERRORS///"
        }
      ]
    },
    "events": {
      "CallOptionOpen(uint256,address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "EVENTS///"
      }
    },
    "kind": "user",
    "methods": {},
    "notice": "The purpose of this is to be a basic option market implementation. It ignores a lot of option specifis (like the Greeks, for example). This Smart Contract allows for the buying/writing of Covered Calls & Cash-Secured Puts with ETH as the underlying. Calls: Let you buy an asset(underlying) at a set price(the strike) on or after a specific date(expiration). Puts: Let you sell an asset(underlying) at a set price(the strike) on or after a specific date (expiration). Covered Call: The seller(writer) transfers ETH for collateral(the underlying) and writes a Covered Call. The buyer pays premium w DAI. Covered Call: At expiration, the buyer has the right to ETH at strike price if spot(market) price is greater than strike price. Settles with DAI. Cash-Secured Put: The writer transfers ETH for collateral. Buyer pays premium w DAI. Cash-Secured Put: At expiration, if market price less than strike, buyer has right to sell ETH at the strike to the writer. Settles w DAI. All options have the following properties: Strike price - The price at which the underlying asset can either be bought or sold. In this contract the strike == the initial spot price for simplicity. Expiry - The date at which the option expires. Premium - The price of the options contract that buyer pays. This smart contract supports two strategies for the option writer: 1. Covered Calls - You sell upside on ETH while you hold it for yield, which comes from premium (Netural/Bullish on ETH). 2. Cash-secured Puts - You earn yield on ETH (Bullish).",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 161,
        "contract": "contracts/Options.sol:Options",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 53,
        "contract": "contracts/Options.sol:Options",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1765,
        "contract": "contracts/Options.sol:Options",
        "label": "daiEthPriceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 1768,
        "contract": "contracts/Options.sol:Options",
        "label": "dai",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)856"
      },
      {
        "astId": 1770,
        "contract": "contracts/Options.sol:Options",
        "label": "s_optionCounter",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1772,
        "contract": "contracts/Options.sol:Options",
        "label": "s_optionId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1776,
        "contract": "contracts/Options.sol:Options",
        "label": "s_tokenToEthFeed",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1781,
        "contract": "contracts/Options.sol:Options",
        "label": "s_optionIdToOption",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Option)1815_storage)"
      },
      {
        "astId": 1786,
        "contract": "contracts/Options.sol:Options",
        "label": "s_tradersPosition",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)856": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(OptionState)1791": {
        "encoding": "inplace",
        "label": "enum Options.OptionState",
        "numberOfBytes": "1"
      },
      "t_enum(OptionType)1794": {
        "encoding": "inplace",
        "label": "enum Options.OptionType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Option)1815_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Options.Option)",
        "numberOfBytes": "32",
        "value": "t_struct(Option)1815_storage"
      },
      "t_struct(Option)1815_storage": {
        "encoding": "inplace",
        "label": "struct Options.Option",
        "members": [
          {
            "astId": 1796,
            "contract": "contracts/Options.sol:Options",
            "label": "writer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1798,
            "contract": "contracts/Options.sol:Options",
            "label": "buyer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1800,
            "contract": "contracts/Options.sol:Options",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1802,
            "contract": "contracts/Options.sol:Options",
            "label": "strike",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1804,
            "contract": "contracts/Options.sol:Options",
            "label": "premiumDue",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1806,
            "contract": "contracts/Options.sol:Options",
            "label": "expiration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1808,
            "contract": "contracts/Options.sol:Options",
            "label": "collateral",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1811,
            "contract": "contracts/Options.sol:Options",
            "label": "optionState",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(OptionState)1791"
          },
          {
            "astId": 1814,
            "contract": "contracts/Options.sol:Options",
            "label": "optionType",
            "offset": 1,
            "slot": "7",
            "type": "t_enum(OptionType)1794"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}